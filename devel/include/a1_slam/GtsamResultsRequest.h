// Generated by gencpp from file a1_slam/GtsamResultsRequest.msg
// DO NOT EDIT!


#ifndef A1_SLAM_MESSAGE_GTSAMRESULTSREQUEST_H
#define A1_SLAM_MESSAGE_GTSAMRESULTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a1_slam
{
template <class ContainerAllocator>
struct GtsamResultsRequest_
{
  typedef GtsamResultsRequest_<ContainerAllocator> Type;

  GtsamResultsRequest_()
    : factor_type()
    , factor()
    , key(0)
    , init_estimate()  {
    }
  GtsamResultsRequest_(const ContainerAllocator& _alloc)
    : factor_type(_alloc)
    , factor(_alloc)
    , key(0)
    , init_estimate(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _factor_type_type;
  _factor_type_type factor_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _factor_type;
  _factor_type factor;

   typedef int64_t _key_type;
  _key_type key;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _init_estimate_type;
  _init_estimate_type init_estimate;





  typedef boost::shared_ptr< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GtsamResultsRequest_

typedef ::a1_slam::GtsamResultsRequest_<std::allocator<void> > GtsamResultsRequest;

typedef boost::shared_ptr< ::a1_slam::GtsamResultsRequest > GtsamResultsRequestPtr;
typedef boost::shared_ptr< ::a1_slam::GtsamResultsRequest const> GtsamResultsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a1_slam::GtsamResultsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a1_slam::GtsamResultsRequest_<ContainerAllocator1> & lhs, const ::a1_slam::GtsamResultsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.factor_type == rhs.factor_type &&
    lhs.factor == rhs.factor &&
    lhs.key == rhs.key &&
    lhs.init_estimate == rhs.init_estimate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a1_slam::GtsamResultsRequest_<ContainerAllocator1> & lhs, const ::a1_slam::GtsamResultsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a1_slam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0daaec3a4a618092d7b420d174078c0f";
  }

  static const char* value(const ::a1_slam::GtsamResultsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0daaec3a4a618092ULL;
  static const uint64_t static_value2 = 0xd7b420d174078c0fULL;
};

template<class ContainerAllocator>
struct DataType< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1_slam/GtsamResultsRequest";
  }

  static const char* value(const ::a1_slam::GtsamResultsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string factor_type\n"
"string factor\n"
"int64 key\n"
"string init_estimate\n"
;
  }

  static const char* value(const ::a1_slam::GtsamResultsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.factor_type);
      stream.next(m.factor);
      stream.next(m.key);
      stream.next(m.init_estimate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GtsamResultsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a1_slam::GtsamResultsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a1_slam::GtsamResultsRequest_<ContainerAllocator>& v)
  {
    s << indent << "factor_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.factor_type);
    s << indent << "factor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.factor);
    s << indent << "key: ";
    Printer<int64_t>::stream(s, indent + "  ", v.key);
    s << indent << "init_estimate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.init_estimate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // A1_SLAM_MESSAGE_GTSAMRESULTSREQUEST_H
