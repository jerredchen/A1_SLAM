// Generated by gencpp from file a1_slam/FinalResultsRequest.msg
// DO NOT EDIT!


#ifndef A1_SLAM_MESSAGE_FINALRESULTSREQUEST_H
#define A1_SLAM_MESSAGE_FINALRESULTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a1_slam
{
template <class ContainerAllocator>
struct FinalResultsRequest_
{
  typedef FinalResultsRequest_<ContainerAllocator> Type;

  FinalResultsRequest_()
    : req(0)  {
    }
  FinalResultsRequest_(const ContainerAllocator& _alloc)
    : req(0)  {
  (void)_alloc;
    }



   typedef int8_t _req_type;
  _req_type req;





  typedef boost::shared_ptr< ::a1_slam::FinalResultsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a1_slam::FinalResultsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FinalResultsRequest_

typedef ::a1_slam::FinalResultsRequest_<std::allocator<void> > FinalResultsRequest;

typedef boost::shared_ptr< ::a1_slam::FinalResultsRequest > FinalResultsRequestPtr;
typedef boost::shared_ptr< ::a1_slam::FinalResultsRequest const> FinalResultsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a1_slam::FinalResultsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a1_slam::FinalResultsRequest_<ContainerAllocator1> & lhs, const ::a1_slam::FinalResultsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.req == rhs.req;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a1_slam::FinalResultsRequest_<ContainerAllocator1> & lhs, const ::a1_slam::FinalResultsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a1_slam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a1_slam::FinalResultsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a1_slam::FinalResultsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a1_slam::FinalResultsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0813fe7539f367d34151c5a6cfd4dacd";
  }

  static const char* value(const ::a1_slam::FinalResultsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0813fe7539f367d3ULL;
  static const uint64_t static_value2 = 0x4151c5a6cfd4dacdULL;
};

template<class ContainerAllocator>
struct DataType< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1_slam/FinalResultsRequest";
  }

  static const char* value(const ::a1_slam::FinalResultsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 req\n"
;
  }

  static const char* value(const ::a1_slam::FinalResultsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.req);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FinalResultsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a1_slam::FinalResultsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a1_slam::FinalResultsRequest_<ContainerAllocator>& v)
  {
    s << indent << "req: ";
    Printer<int8_t>::stream(s, indent + "  ", v.req);
  }
};

} // namespace message_operations
} // namespace ros

#endif // A1_SLAM_MESSAGE_FINALRESULTSREQUEST_H
