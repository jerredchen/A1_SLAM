{
  # Whether to perform 2D or 3D SLAM. Select 'True' if using 2D LIDAR for estimating odometry.
  perform_2D_SLAM: true,

  # Prior initial pose estimates and standard deviations,
  # formatted as [x, y, z, roll, pitch, yaw], in m and degrees.
  prior_pose_estimate: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
  prior_pose_sigmas: [1.0e-4, 1.0e-4, 1.0e-4, 0.01, 0.01, 0.01],

  # Whether to publish poses with pose covariances.
  publish_covariance: false,

  #########################################################################################
  ##################################         IMU         ##################################
  #########################################################################################

  imu: {

    # Whether to use the Unitree custom state message to extract the IMU.
    use_custom_unitree: true,

    # The topic name for obtaining IMU measurements.
    topic: /HighState,

    # The number of measurements that the IMU should preintegrate before adding an IMU factor.
    # Used if IMU is the only sensor selected.
    imu_factor_rate: 50,

    # Prior initial velocity estimates and standard deviations, formatted as [x, y, z], in m/s.
    prior_vel_estimate: [0.0, 0.0, 0.0],
    prior_vel_sigmas: [1.0e-8, 1.0e-8, 1.0e-8],

    # Prior initial biases and standard devations, formatted as [accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z],
    # in m/s^2 and rad/s for the accelerometer and gyroscope respectively.
    # prior_bias_estimate: [-0.05325, 0.075894, -0.235, -8.238e-5, 3.3202e-6, -0.000224], # for 03-05-07-01
    prior_bias_estimate: [-0.05325, 0.075894, 0, -8.238e-5, 3.3202e-6, -0.000224], # for 03-05-07-01
    prior_bias_sigmas: [1.0e-3, 1.0e-3, 1.0e-3, 1.0e-5, 1.0e-5, 1.0e-5],

    # The sensor noise standard deviation of the accelerometer formatted as [x, y, z], in m/s^2/sqrt(Hz).
    # accel_sigmas: [0.005171, 0.00334, 0.00660],
    accel_sigmas: [0.06381, 0.09469, 0.17038],
    # The sensor noise standard deviation of the gyroscope formatted as [x, y, z], in rad/s/sqrt(Hz).
    # gyro_sigmas: [0.000482, 0.000385, 0.000409],
    gyro_sigmas: [0.00671, 0.00727, 0.00421],
    # The uncertainty standard deviation during integration formatted as [x, y, z].
    integration_sigmas: [1.0e-5, 1.0e-5, 1.0e-5]

  },

  #########################################################################################
  ##################################       LiDAR         ##################################
  #########################################################################################

  lidar2d: {

    # The topic name for the 2D LiDAR.
    topic: /slamware_ros_sdk_server_node/scan,

    # The noise standard deviation of registering two laser scans formatted as [x, y, theta], in m and degrees.
    icp_noise: [1.0e-2, 1.0e-2, 1.0],

    # The number of scans that should be compared for calculating skip connections.
    submap_length: 15,

    # The maximum threshold distance for forming correspondences during ICP.
    correspondence_threshold: 0.2,

    # The minimum range distance that should be considered from the LIDAR.
    min_range: 1.5,
    # The maximum range distance that should be considered from the LIDAR.
    max_range: 5,

  },

  lidar3d: {

    # The topic name for the 3D LiDAR.
    topic: /velodyne_points,

    # The method to use for point cloud registration.
    # Options are: teaser, gicp.
    method: gicp,

    # The noise standard deviation of registering two laser clouds
    # formatted as [x, y, z, roll, pitch, yaw], in m and degrees.
    icp_noise: [1.0e-2, 1.0e-2, 1.0e-2, 1.0, 1.0, 1.0],

    # The number of scans that should be compared for calculating skip connections.
    submap_length: 15,

    # The maximum threshold distance for forming correspondences during ICP.
    correspondence_threshold: 0.2,

    # The minimum range distance that should be considered from the LIDAR.
    min_range: 1.5,
    # The maximum range distance that should be considered from the LIDAR.
    max_range: 5,

  },

  #########################################################################################
  ##################################       Depth         ##################################
  #########################################################################################

  depth: {

    # The topic name for the depth camera.
    topic: /camera/depth/points,

    # The method to use for point cloud registration.
    # Options are: teaser, gicp.
    registration_method: teaser,

    # The noise standard deviation of registering two laser clouds
    # formatted as [x, y, z, roll, pitch, yaw], in m and degrees.
    icp_noise: [1.0e-2, 1.0e-2, 1.0e-2, 1.0, 1.0, 1.0],

    # The number of scans that should be compared for calculating skip connections.
    submap_length: 15,

    # The maximum threshold distance for forming correspondences during ICP.
    correspondence_threshold: 0.2,

    # The minimum range distance that should be considered from the depth point cloud.
    min_range: 1.5,
    # The maximum range distance that should be considered from the depth point cloud.
    max_range: 5,

  }
}